{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categ","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","imgs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAEaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAmBhD,OACI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAe,SAAAS,GAAK,OAAMP,GAAN,mBAAqBO,OACzCN,EAAc,MAMlB,SACI,uBACIO,KAAM,OACNC,MAAST,EACTU,SApBc,SAAEP,GACxBF,EAAeE,EAAEQ,OAAOF,a,+BCJnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGbC,EAHa,0FAG4EC,UAAUH,GAHtF,sBAIAI,MAAOF,GAJP,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAIFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAQF,EAAIE,MAAMpB,OAASkB,EAAIE,MAAQ,OACvCV,IAAG,UAAGQ,EAAIG,cAAP,aAAG,EAAYC,iBAAiBZ,QAbxB,kBAiBZM,GAjBY,4CAAH,sDCDPO,EAAc,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAItC,OAFAc,QAAQC,IAAIL,GAGR,sBAAKM,UAAY,yCAAjB,UACI,qBAAKC,IAAOjB,EAAMkB,IAAOR,IACzB,4BAAKA,QCLJS,EAAU,SAAC,GAAoB,IAAjBrB,EAAgB,EAAhBA,SAAgB,ECCf,SAAEA,GAAe,IAAD,EACdd,mBAAS,CAC/BqB,KAAM,GACNe,SAAU,IAH0B,mBACjCC,EADiC,KAC1BC,EAD0B,KAgBxC,OAVAC,qBAAU,WACN1B,EAASC,GACJ0B,MAAM,SAAAhB,GACHc,EAAU,CACNjB,KAAOG,EACPY,SAAU,SAGvB,CAAEtB,IAEEuB,EDd0BI,CAAa3B,GAAhC4B,EAHyB,EAG/BrB,KAAae,EAHkB,EAGlBA,QAYrB,OACI,qCACI,oBAAIJ,UAAY,oCAAhB,SAAuDlB,IAErDsB,EAAU,mBAAGJ,UAAY,qDAAf,qBAAkF,KAE9F,qBAAKA,UAAW,YAAhB,SACKU,EAAKnB,KAAK,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADGA,EAAIC,aEKpBkB,EA7BM,WAAO,IAAD,EAEa3C,mBAAS,CAAC,iBAFvB,mBAEhB4C,EAFgB,KAEJ7C,EAFI,KASvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAEA,6BAGQ6C,EAAWrB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAASA,SAAYA,GACNA,Y,MCnBvC+B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.44453af1.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = ( e ) => {\r\n        setInputValue( e.target.value );\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if( inputValue.trim().length > 1 ){\r\n            \r\n            setCategories( categ => [ inputValue, ...categ ]);\r\n            setInputValue('');\r\n        }\r\n\r\n    };\r\n\r\n    return (\r\n        <form onSubmit = {handleSubmit}>\r\n            <input \r\n                type= 'text'\r\n                value = {inputValue}    \r\n                onChange = { handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired\r\n}","\r\n\r\n// devuelve 10 gifs\r\nexport const getGifs = async( category ) => {\r\n\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=44nktku9kuZWhrj4HyoTCQeBDZZwL04w&q=${encodeURI(category)}&limit=10`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    // para recorrer y devolver lo que se requiere de la imagen\r\n\r\n    const gifs = data.map( img => {\r\n        return{\r\n            id: img.id,\r\n            title : img.title.trim() ? img.title : 'Luci',\r\n            url : img.images?.downsized_medium.url\r\n        }\r\n    });\r\n    \r\n    return gifs; // devuelve una promesaa que resuelver\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { id, title, url } ) => {\r\n\r\n    console.log(title)\r\n\r\n    return (\r\n        <div className = 'card animate__animated animate__fadeIn'>\r\n            <img src= { url } alt = {title} />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n\r\n    \r\n    const { data :imgs , loading } = useFetchGifs(category);\r\n\r\n\r\n    // useEffect( ( ) => {\r\n    //     getGifs( category )\r\n    //         .then( setImages ) // se rellena la lista con los datos que se traen al resolver la promesa\r\n    // }, [ category ]); // se pone category aquí por el warning en caso de tener que volver a renderizar \r\n    \r\n    // al mandar una dependencia vacía, todo\r\n    // lo que se encuentre dentro de la función se va a disparar una única vez \r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className = \"animate__animated animate__fadeIn\" >{ category }</h3>\r\n\r\n            { loading ? <p className = 'animate__animated animate__flash animate__infinite'>Loading</p> : null}\r\n            \r\n            <div className= 'card-grid'>           \r\n                {imgs.map( img => \r\n                    <GifGridItem \r\n                        key = {img.id}\r\n                        {...img}/>                    \r\n                )}\r\n            \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","// un  hooks son solamente archivos que contienen funciones \r\n\r\nimport { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading : true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs( category )\r\n            .then( img => {\r\n                setState( {\r\n                    data : img,\r\n                    loading : false\r\n                } )\r\n            } )\r\n    }, [ category ]) // con esto solo cambiará cuando la categoría cambie\r\n\r\n    return state; // va retornar loading false, ya cuando la promesa se resuelva\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Black Mirror']);\r\n\r\n    // const handleAdd = (newCategory) => {\r\n    //     // setCategories( [...categories, 'Lupin'] );\r\n    //     setCategories( categ => [ ...categ, newCategory ]);\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories = { setCategories } />\r\n            <hr/>\r\n\r\n            <ol>\r\n                { \r\n                    /* El key no puede ser el índice y tiene que ser único */\r\n                    categories.map( category => (\r\n                        <GifGrid category = {category} \r\n                                key = {category}\r\n                        />\r\n                     ))\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}